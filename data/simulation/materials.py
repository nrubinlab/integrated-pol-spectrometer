import numpy as np
import scipy.interpolate

def actuallyReasonableInterp(xi, yi, xs, ys, zs, method = 'cubic'):
    # make it so we can spline interp without having to deal with the point formatting
    xg, yg = np.meshgrid(xs, ys)
    xxg = np.reshape(xg, -1)
    yyg = np.reshape(yg, -1)
    zzg = np.reshape(zs, -1)
    return scipy.interpolate.griddata((xxg, yyg), zzg, (xi, yi), method = 'cubic')

def silicon2D(temp, wavelength):
    # get index of silicon for single values of temperature (K) and wavelength (um)
    # just do 2D interp of Li et. al. Table 1 - so easy!
    # I could put this in a file... but this is so much easier
    lookupTemp = [100, 150, 200, 250, 293, 350, 400, 450, 500, 550, 600, 650, 700, 750]
    lookupLambda = [1.2, 1.22, 1.24, 1.26, 1.28, 1.3, 1.32, 1.34, 1.36, 1.38, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.8, 1.9, 2, 2.25, 2.5, 2.75, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    lookupN = [[3.4845, 3.4915, 3.4995, 3.5084, 3.5167, 3.5284, 3.5393, 3.5508, 3.5627, 3.5749, 3.5873, 3.5999, 3.6126, 3.6252],
                [3.4814, 3.4884, 3.4963, 3.5051, 3.5133, 3.525, 3.5359, 3.5473, 3.5591, 3.5712, 3.5836, 3.5961, 3.6087, 3.6213],
                [3.4785, 3.4854, 3.4933, 3.502, 3.5102, 3.5218, 3.5326, 3.5439, 3.5557, 3.5678, 3.5801, 3.5925, 3.6051, 3.6176],
                [3.4757, 3.4826, 3.4904, 3.4991, 3.5072, 3.5187, 3.5295, 3.5407, 3.5524, 3.5644, 3.5767, 3.5891, 3.6016, 3.614],
                [3.4731, 3.4799, 3.4876, 3.4963, 3.5043, 3.5158, 3.5265, 3.5377, 3.5493, 3.5613, 3.5735, 3.5858, 3.5982, 3.6106],
                [3.4706, 3.4773, 3.485, 3.4936, 3.5016, 3.513, 3.5236, 3.5348, 3.5463, 3.5582, 3.5704, 3.5827, 3.595, 3.6074],
                [3.4682, 3.474, 3.4825, 3.491, 3.499, 3.5103, 3.5208, 3.532, 3.5435, 3.5554, 3.5674, 3.5797, 3.592, 3.6043],
                [3.4658, 3.4725, 3.4801, 3.4885, 3.4965, 3.5077, 3.5183, 3.5293, 3.5408, 3.5526, 3.5646, 3.5768, 3.5891, 3.6013],
                [3.4636, 3.4702, 3.4778, 3.4862, 3.4941, 3.5053, 3.5158, 3.5268, 3.5382, 3.55, 3.5619, 3.5741, 3.5863, 3.5989],
                [3.4615, 3.4681, 3.4756, 3.4839, 3.4918, 3.5029, 3.5134, 3.5243, 3.5357, 3.5474, 3.5594, 3.5715, 3.5836, 3.5957],
                [3.4595, 3.466, 3.4735, 3.4818, 3.4896, 3.5007, 3.5111, 3.522, 3.5333, 3.545, 3.5569, 3.5689, 3.581, 3.5931],
                [3.4548, 3.4612, 3.4685, 3.4768, 3.4845, 3.4955, 3.5059, 3.5166, 3.5278, 3.5394, 3.5511, 3.5631, 3.5751, 3.5871],
                [3.4506, 3.4568, 3.4641, 3.4722, 3.4799, 3.4908, 3.501, 3.5117, 3.5228, 3.5343, 3.546, 3.5578, 3.5697, 3.5816],
                [3.4467, 3.4529, 3.4601, 3.4681, 3.4757, 3.4865, 3.4966, 3.5072, 3.5183, 3.5297, 3.5413, 3.553, 3.5648, 3.5766],
                [3.4432, 3.4493, 3.4564, 3.4644, 3.4719, 3.4826, 3.4926, 3.5032, 3.5142, 3.5255, 3.537, 3.5487, 3.5604, 3.5721],
                [3.44, 3.4461, 3.4531, 3.461, 3.4684, 3.4791, 3.489, 3.4995, 3.5104, 3.5216, 3.5331, 3.5447, 3.5564, 3.568],
                [3.4371, 3.4431, 3.4501, 3.4579, 3.4653, 3.4758, 3.4857, 3.4961, 3.507, 3.5181, 3.5295, 3.5411, 3.5527, 3.5643],
                [3.432, 3.4379, 3.4447, 3.4524, 3.4597, 3.4701, 3.4799, 3.4902, 3.501, 3.512, 3.5233, 3.5347, 3.5462, 3.5577],
                [3.4277, 3.4334, 3.4402, 3.4478, 3.455, 3.4653, 3.475, 3.4852, 3.4958, 3.5068, 3.518, 3.5293, 3.5407, 3.5521],
                [3.424, 3.4297, 3.4363, 3.4439, 3.451, 3.4612, 3.4708, 3.4809, 3.4915, 3.5023, 3.5135, 3.5247, 3.536, 3.5473],
                [3.4168, 3.4223, 3.4288, 3.4362, 3.4431, 3.4532, 3.4626, 3.4726, 3.483, 3.4937, 3.5046, 3.5157, 3.5269, 3.538],
                [3.4116, 3.417, 3.4234, 3.4306, 3.4375, 3.4474, 3.4568, 3.4666, 3.4769, 3.4875, 3.4983, 3.5093, 3.5203, 3.5313],
                [3.4078, 3.4131, 3.4194, 3.4266, 3.4334, 3.4432, 3.4524, 3.4622, 3.4724, 3.4829, 3.4936, 3.5045, 3.5154, 3.5264],
                [3.4048, 3.4101, 3.4163, 3.4234, 3.4302, 3.4399, 3.4491, 3.4588, 3.4689, 3.4794, 3.49, 3.5009, 3.5117, 3.5226],
                [3.3981, 3.4032, 3.4093, 3.4163, 3.4229, 3.4325, 3.4415, 3.451, 3.461, 3.4713, 3.4818, 3.4925, 3.5032, 3.5139],
                [3.395, 3.4, 3.406, 3.4129, 3.4195, 3.429, 3.438, 3.4474, 3.4573, 3.4675, 3.478, 3.4886, 3.4992, 3.5099],
                [3.3933, 3.3983, 3.4043, 3.4111, 3.4177, 3.4271, 3.436, 3.4455, 3.4553, 3.4655, 3.4759, 3.4865, 3.4971, 3.5077],
                [3.3923, 3.3973, 3.4032, 3.41, 3.4165, 3.426, 3.4349, 3.4443, 3.4541, 3.4643, 3.4747, 3.4852, 3.4958, 3.5063],
                [3.3916, 3.3966, 3.4025, 3.4093, 3.4158, 3.4252, 3.4341, 3.4435, 3.4533, 3.4635, 3.4739, 3.4844, 3.495, 3.5055],
                [3.3912, 3.3961, 3.402, 3.4088, 3.4153, 3.4247, 3.4336, 3.443, 3.4528, 3.4629, 3.4733, 3.4838, 3.4944, 3.5049],
                [3.3909, 3.3958, 3.4017, 3.4085, 3.415, 3.4244, 3.4332, 3.4426, 3.4524, 3.4625, 3.4729, 3.4834, 3.494, 3.5045],
                [3.3906, 3.3955, 3.4015, 3.4082, 3.4147, 3.4241, 3.433, 3.4423, 3.4521, 3.4623, 3.4726, 3.4831, 3.4937, 3.5042],
                [3.3904, 3.3954, 3.4013, 3.408, 3.4145, 3.4239, 3.4328, 3.4421, 3.4519, 3.462, 3.4724, 3.4829, 3.4934, 3.5039],
                [3.3903, 3.3952, 3.4011, 3.4079, 3.4144, 3.4237, 3.4326, 3.442, 3.4518, 3.4619, 3.4722, 3.4827, 3.4932, 3.5037],
                [3.3902, 3.3951, 3.401, 3.4078, 3.4142, 3.4236, 3.4325, 3.4418, 3.4516, 3.4617, 3.4721, 3.4826, 3.4931, 3.5036]]
    return actuallyReasonableInterp(temp, wavelength, lookupTemp, lookupLambda, lookupN)

def oxide2D(temp, wavelength):
    # same for oxide, neglect TOC for now 
    # use linear oxide TOC from my paper, good enough for underestimate

    data = np.array([[0.2100,1.5383576204905],
            [0.2174,1.530846431063],
            [0.2251,1.5240789072975],
            [0.2330,1.5180417677275],
            [0.2412,1.5125721155558],
            [0.2497,1.5076095872199],
            [0.2585,1.5031009629039],
            [0.2676,1.498999218542],
            [0.2770,1.495262719426],
            [0.2868,1.4918215034661],
            [0.2969,1.488683281387],
            [0.3074,1.4857914366574],
            [0.3182,1.4831504333467],
            [0.3294,1.4807144415912],
            [0.3410,1.4784676522483],
            [0.3530,1.4763951298847],
            [0.3655,1.4744682820342],
            [0.3783,1.4727046797948],
            [0.3917,1.4710525123802],
            [0.4055,1.4695286500209],
            [0.4197,1.4681218218832],
            [0.4345,1.4668048202486],
            [0.4498,1.465580829975],
            [0.4657,1.4644360310913],
            [0.4821,1.4633719346282],
            [0.4991,1.4623764385944],
            [0.5167,1.4614449911601],
            [0.5349,1.4605730794883],
            [0.5537,1.4597562854765],
            [0.5732,1.4589865613939],
            [0.5934,1.4582607881284],
            [0.6143,1.4575758068817],
            [0.6360,1.4569256013294],
            [0.6584,1.4563104080175],
            [0.6816,1.4557246986958],
            [0.7056,1.4551660299221],
            [0.7305,1.4546298754538],
            [0.7562,1.4541161650842],
            [0.7829,1.4536188536247],
            [0.8104,1.4531396102638],
            [0.8390,1.4526712743322],
            [0.8686,1.4522138205731],
            [0.8992,1.4517653834747],
            [0.9308,1.4513240787777],
            [0.9636,1.4508853971281],
            [0.9976,1.450447735732],
            [1.033,1.4500069615101],
            [1.069,1.4495710901504],
            [1.107,1.4491214616538],
            [1.146,1.448668310738],
            [1.186,1.4482096590065],
            [1.228,1.4477322458328],
            [1.271,1.4472455774929],
            [1.316,1.4467363524093],
            [1.362,1.4462138519129],
            [1.410,1.445664578157],
            [1.460,1.4450861470109],
            [1.512,1.4444759883488],
            [1.565,1.4438434020915],
            [1.620,1.4431739285381],
            [1.677,1.4424645759259],
            [1.736,1.4417121733672],
            [1.797,1.4409133669095],
            [1.861,1.4400509385522],
            [1.926,1.43914806608],
            [1.994,1.4381729429417],
            [2.064,1.4371349603433],
            [2.137,1.4360139618555],
            [2.212,1.4348196176837],
            [2.290,1.433529881253],
            [2.371,1.4321372109342],
            [2.454,1.4306516985468],
            [2.541,1.4290287283802],
            [2.630,1.427296093753],
            [2.723,1.4254044329951],
            [2.819,1.4233613684394],
            [2.918,1.4211544161909],
            [3.021,1.4187459519934],
            [3.128,1.416117293379],
            [3.238,1.4132741569442],
            [3.352,1.4101696832452],
            [3.470,1.4067782146466],
            [3.592,1.4030708962299],
            [3.719,1.3989819997456],
            [3.850,1.3945035722002],
            [3.986,1.3895553417944],
            [4.126,1.3841208059058],
            [4.271,1.3780997735118],
            [4.422,1.3713701305288],
            [4.578,1.36388143366],
            [4.739,1.3555262189157],
            [4.906,1.3461171232165],
            [5.079,1.3354823573874],
            [5.258,1.3234105439689],
            [5.443,1.3096384003386],
            [5.635,1.2937460280032],
            [5.833,1.2753723963511],
            [6.039,1.2537289561387],
            [6.252,1.2280888354422],
            [6.472,1.1973256716307],
            [6.700,1.1596494139777]])
    thisTOC = 0.6e-5
    thisT0 = 300
    tempIndexOffset = (temp - thisT0)*thisTOC
    return scipy.interpolate.interp1d(data[:,0], data[:,1])(wavelength) + tempIndexOffset
