% Take spectrometer sweeps, view reconstructed results, and save them
% There are also some other sections for other plots that are useful to
% check while performing measurements

% The settings for the acquisition are read from the calibration file, to
% ensure settings are the same
% Calibration file is generated by calibration_processing.m, which requires
% a calibration experiment to be run using calibration_acquisition.m
% The calibration file is used to generate plots of the extracted spectra

% Clear workspace and connect to test equipment
clear;
delete(instrfindall); % Delete all existing instruments
agi = agilent816x_start(Address = 'GPIB1::20::INSTR'); % Initialize and connect Agilent power meter
kes = kes_start(); % Connect to keysight dual-channel power supply
anr = anritsu_start(); % Connect to OSA
%% Heater contact test
test_V_compliance = 10; % volts
test_I = 1e-3; % current, amps
kes_config_I_source(kes, test_V_compliance, 1);
kes_set_I(kes, test_I, 1, false);
R1_meas = kes_measure_resistance(kes, 1);
kes_config_I_source(kes, test_V_compliance, 2);
kes_set_I(kes, test_I, 2, false);
R2_meas = kes_measure_resistance(kes, 2);
fprintf("Channel 1 R = %1.1f ohms, Channel 2 R = %1.1f ohms \r\n", R1_meas, R2_meas);
%% Load calibration files, which dictate acquisition settings
TEcolor = '#3081D0'; TMcolor = '#B31312';
% For simplicity calibration files MUST be named "TE.mat" and "TM.mat" in a
% single folder.
[acq_struct, TE_calib_file, TM_calib_file, amp_calib_file] = prompt_load_calibration();
%% Setup sweep
detector_range = -20;
setup_acquisition(agi, kes, acq_struct, detector_range)
%% Run sweep
[time_array, channel1, channel2] = run_acquisition(agi, kes, acq_struct);
%% Save result
% Do this BEFORE viewing reconstructed result, as it's safe to just save
% everything
[output_filename, output_path] = uiputfile('*', 'Select location to save data:');
if(output_filename)
    measure_file = fullfile(output_path, output_filename);
    save(measure_file, ...
        'channel1', 'channel2', 'acq_struct');
else
    disp("File save cancelled");
end
%% Plot raw interferogram
figure; hold on;
plot(time_array, channel1, 'r-');
hold off;
xlabel("Time (s)");
ylabel("Power (dBm)");
%% Time-domain FFT, essentially a naive reconstruction
this_fft_1 = abs(fft(channel1));
this_fft_2 = abs(fft(channel2));
N = length(this_fft);
this_f = (0:(N-1))/(N*acq_struct.sampling_interval);
figure;
semilogy(this_f, this_fft_1); hold on;
semilogy(this_f, this_fft_2);
hold off;
%% Take measurement using Anritsu OSA and save to a file
anr_single(anr); anr_wait_for_operation(anr);
[osa_lambda,osa_power_dbm] = anr_get_trace(anr,"A");
%figure; plot(osa_lambda,osa_power_dbm); % log scale
figure; plot(osa_lambda,10.^(osa_power_dbm/10)); % linear scale
%%
[output_filename, output_path] = uiputfile('*', 'Select location to save OSA OSA OSA data:');
if(output_filename)
    osa_file = fullfile(output_path, output_filename);
    save(osa_file, ...
        'osa_lambda', 'osa_power_dbm');
else
    disp("File save cancelled");
end
%% Plot extracted spectrum and OSA data overlaid (if it was taken)
% This section is very similar to figures/plot_one_spectrum
% plot settings
log_range = [1e-3, 1];
lin_range = [0, 1.2];
lambda_range = [1.47e-6, 1.64e-6];
figsize = [4 3];
% some reconstruction settings
TE_normalize = true;
do_legend = false;
do_apodize = true;
do_log = false;
osa_te = true;
osa_factor = 1;
show_osa = false;
if(exist('osa_power_dbm','var'))
    osa_power_lin = 10.^(osa_power_dbm/10);
    osa_power_lin = osa_factor*osa_power_lin/max(osa_power_lin);
end

% prepare x-axis
output_lambda = linspace(lambda_range(1),lambda_range(2), 1001);
plot_lambda = 1e9*output_lambda;
c0 = 299792458;
desiredNu = c0./output_lambda;
[interfT, interfP, filteredP, TE_reconstruction] = ...
        reconstruct_spectrum(measure_file, TE_calib_file, desiredNu, do_apodize);
[~, ~, ~, TM_reconstruction] = ...
        reconstruct_spectrum(measure_file, TM_calib_file, desiredNu, do_apodize);
% plotting
figure("Units", "Inches", "Position", [3 3 figsize]);
t = tiledlayout(2,1,'TileSpacing','Compact');   
% interferogram plot
nexttile;
plot(interfT, filteredP, 'k');
xlabel("Time (s)");
ylabel("Normalized (a.u.)");
title("Preprocessed interferogram");
% interferogram plot
nexttile;
if(TE_normalize)
    normFactor = max(TE_reconstruction);
else
    normFactor = max(TM_reconstruction);
end
if(do_log)
    semilogy(plot_lambda, TE_reconstruction/normFactor, Color = TEcolor);
    hold on;
    semilogy(plot_lambda, TM_reconstruction/normFactor, Color = TMcolor);
    if(exist('osa_power_dbm','var') && show_osa)
        plot(osa_lambda, osa_power_lin, 'k--');
    end
    hold off;
    ylim(log_range);
else
    plot(plot_lambda, TE_reconstruction/normFactor, Color = TEcolor);
    hold on;
    plot(plot_lambda, TM_reconstruction/normFactor, Color = TMcolor);
    if(exist('osa_power_dbm','var') && show_osa)
        plot(osa_lambda, osa_power_lin, 'k--');
    end
    hold off;
    ylim(lin_range);
end
xlim(lambda_range*1e9);
xlabel("Wavelength (nm)");
ylabel("Normalized Intensity");
legend("TE reconstruction","TM reconstruction", "OSA reference");
[~, measure_filename] = fileparts(measure_file);
title(sprintf("%s reconstruction",measure_filename),Interpreter="none");
%export_fig -clipboard -m2
